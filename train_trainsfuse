from __future__ import absolute_import, division, print_function
import os
import numpy as np
import time
import cv2
import torch
import torch.nn.functional as F
import torch.optim as optim
from torch.utils.data import DataLoader
import torchvision.models as models
import json

from utils import *
from kitti_utils import *
from layers import *

import datasets
import networks
from IPython import embed
import random

from lib import TransFuse

STEREO_SCALE_FACTOR = 5.4


class MSE(nn.Module):
    def __init__(self):
        super(MSE, self).__init__()

    def forward(self, pred, real):
        diffs = torch.add(real, -pred)
        n = torch.numel(diffs.data)
        mse = torch.sum(diffs.pow(2)) / n

        return mse


class SIMSE(nn.Module):

    def __init__(self):
        super(SIMSE, self).__init__()

    def forward(self, pred, real):
        diffs = torch.add(real, - pred)
        n = torch.numel(diffs.data)
        simse = torch.sum(diffs).pow(2) / (n ** 2)

        return simse
        
def train(train_loader, test_loader, model, optimizer, epoch, best_loss, device):
    
    model.train()

    for i, pack in enumerate(train_loader, start=1):
      
        









































































    
    
if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--epoch', type=int, default=25, help='epoch number')
    parser.add_argument('--lr', type=float, default=7e-5, help='learning rate')
    parser.add_argument('--batch_size', type=int, default=16, help='training batch size')
    parser.add_argument('--num_workers', type=int, default=4, help='number of workers')
    parser.add_argument('--grad_norm', type=float, default=2.0, help='gradient clipping norm')
    parser.add_argument('--train_path', type=str,
                        default='data/', help='path to train dataset')
    parser.add_argument('--test_path', type=str,
                        default='data/', help='path to test dataset')
    parser.add_argument('--train_save', type=str, default='TransFuse_S')
    parser.add_argument('--beta1', type=float, default=0.5, help='beta1 of adam optimizer')
    parser.add_argument('--beta2', type=float, default=0.999, help='beta2 of adam optimizer')
    parser.add_argument('--device', type=str, default="cuda:1", help='gpu name')


    opt = parser.parse_args()

    # ---- build models ----
    data_path="../../../oxford_processing_new"
    height=256
    width=512
    frame_ids=[0, -1, 1]
    
    model = TransFuse_S(pretrained=True).to(opt.device)
    params = model.parameters()
    optimizer = torch.optim.Adam(params, opt.lr, betas=(opt.beta1, opt.beta2))
    #print('aaaaaaaaaaaaaaaaaaaaaaaaaaa')
    
    
    train_dataset = datasets.KITTIRAWDataset(options,
            data_path, train_filenames, height, width,
            frame_ids, num_scales=4, is_train=True)
    train_loader = DataLoader(
            train_dataset, opt.batch_size, shuffle=True,
            num_workers=opt.num_workers, pin_memory=True, drop_last=True)
    

    val_day_dataset = datasets.KITTIRAWDataset(opt.data_path, val_day_filenames, height, width,
        [0], num_scales=4, is_train=False)
    val_day_loader = DataLoader(
        val_day_dataset, opt.batch_size, shuffle=False,
        num_workers=opt.num_workers, pin_memory=True, drop_last=True)
    val_iter_day = iter(val_day_loader)


    val_night_dataset = datasets.KITTIRAWDataset(opt.data_path, val_night_filenames, height, width,
        [0], num_scales=4, is_train=False)
    val_night_loader = DataLoader(
        val_night_dataset, opt.batch_size, shuffle=False,
        num_workers=opt.num_workers, pin_memory=True, drop_last=True)
    val_iter_night = iter(val_night_loader)
    
    
    
    

    print("#"*20, "Start Training", "#"*20)
    total_step = len(train_loader)
    device=opt.device

    best_loss = 1e5
    for epoch in range(1, opt.epoch + 1):
        #print('aaaaaaaaaaaaaaaaaaaaaaaaaaa')
        best_loss = train(train_loader, test_loader,  model, optimizer, epoch, best_loss, device)
        
        
        
        
        
        
        
        
        
        
        
        
        
